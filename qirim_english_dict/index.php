<?php

/*
$mysqli = new mysqli("127.0.0.1", "root", "root", "qirim_english_dictionary");


if (mysqli_connect_errno()) {
    printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: %s\n", mysqli_connect_error());
    exit();
}
$sql = "
    INSERT INTO
        `english_b`
    SET
        description = '2'
    ";

$mysqli->query($sql);
*/



$abbreviation_eng = [
    'n' => 'noun',
    'a' => 'adjective' ,
    'adv' => 'adverb',
    'attr.' => 'attributive',
    'conj' => 'conjunction',
    'etc.' => 'etc',
    'imp.' => 'imperative',
    'inf.' => 'infinitive',
    'int' => 'interjenction',
    'num' => 'numeral',
    'o.s.' => 'oneself',
    'p. p.' => 'past_participle',
    'pass.' => 'passive',
    'past' => 'past_tense',
    'pl' => 'plural',
    'pref' => 'prefix',
    'pres.p.' => 'present_participle',
    'pron' => 'pronoun',
    'prep' => 'preposition',
    'refl.' => 'reflexive',
    'syn.' => 'synonym',
    'smb.' => 'somebody',
    'smth.' => 'something',
    's.o.' => 'someone',
    'v' => 'verb',
    'vi' => 'verb_intransitive',
    'vt' => 'verb_transitive'
];
$abbreviation_rus = [
    '–∞–≤.' => '–∞–≤–∏–∞—Ü–∏—è',
    '–∞–≤—Å—Ç—Ä–∞–ª.' => '–∞–≤—Å—Ç–∞–ª–∏–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞–≤—Ç.' => '–∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    '–∞–º.' => '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞–Ω–∞—Ç.' => '–∞–Ω–∞—Ç–æ–º–∏—è',
    '–∞–Ω–≥–ª.' => '–∞–Ω–≥–ª–∏–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞–Ω–≥–ª–æ–∏–Ω–¥.' => '–∞–Ω–≥–ª–æ–∏–Ω–¥–∏–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞—Ä–∞–±.' => '–∞—Ä–∞–±—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∞—Ä—Ç.' => '–∞—Ä—Ç–∏–ª–ª–µ—Ä–∏—è',
    '–∞—Ä—Ö.' => '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
    '–∞—Ä—Ö–µ–æ–ª.' => '–∞—Ä—Ö–µ–æ–ª–æ–≥–∏—è',
    '–∞—Å—Ç—Ä.' => '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
    '–∞—Å—Ç—Ä–æ–ª.' => '–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è',
    '–±–∞–∫—Ç.' => '–±–∞–∫—Ç–µ—Ä–∏–æ–ª–æ–≥–∏—è',
    '–±–∏–±–ª.' => '–±–∏–±–ª–µ–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–±–∏–æ–ª.' => '–±–∏–æ–ª–æ–≥–∏—è',
    '–±–∏—Ä–∂.' => '–±–∏—Ä–∂–µ–≤–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–±–æ—Ç.' => '–±–æ—Ç–∞–Ω–∏–∫–∞',
    '–±—É–∫–≤.' => '–±—É–∫–≤–∞–ª—å–Ω–æ',
    '–±—É—Ö–≥.' => '–±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–≤–µ—Ç.' => '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏—è',
    '–≤–º.' => '–≤–º–µ—Å—Ç–æ',
    '–≤–æ–µ–Ω.' => '–≤–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ',
    '–≤–æ–ø—Ä–æ—Å.' => '–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π',
    '–≤ —Ä–∞–∑–Ω. –∑–Ω–∞—á.'  => '–≤ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö',
    '–≤—É–ª—å–≥.' => '–≤—É–ª—å–≥–∞—Ä–∏–∑–º',
    '–≥.' => '–≥–æ—Ä–æ–¥',
    '–≥–µ–Ω–µ—Ç.' => '–≥–µ–Ω–µ—Ç–∏–∫–∞',
    '–≥–µ–æ–≥—Ä.' => '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è',
    '–≥–µ–æ–¥.' => '–≥–µ–æ–¥–µ–∑–∏—è',
    '–≥–µ–æ–ª.' => '–≥–µ–æ–ª–æ–≥–∏—è',
    '–≥–µ–æ–º.' => '–≥–µ–æ–º–µ—Ç—Ä–∏—è',
    '–≥–µ—Ä.' => '–≥–µ—Ä–∞–ª—å–¥–∏–∫–∞',
    '–≥–∏–¥—Ä.' => '–≥–∏–¥—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
    '–≥–ª.' => '–≥–ª–∞–≤–Ω—ã–º',
    '–≥–ª–∞–≥.' => '–≥–ª–∞–≥–æ–ª',
    '–≥–æ–ª–ª.' => '–≥–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–≥–æ—Ä–Ω.' => '–≥–æ—Ä–Ω–æ–µ –¥–µ–ª–æ',
    '–≥—Ä–∞–º.' => '–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞',
    '–≥—Ä–µ—á.' => '–≥—Ä–µ—á–µ—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–≥—Ä—É–±.' => '–≥—Ä—É–±–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '–¥–µ—Ç.' => '–¥–µ—Ç—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–¥–∏–∞–ª.' => '–¥–∏–∞–ª–µ–∫—Ç–∏–∑–º',
    '–¥–∏–ø.' => '–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–¥—Ä.-–≥—Ä–µ—á.' => '–¥—Ä–µ–≤–Ω–µ–≥—Ä–µ—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è',
    '–¥—Ä.-—Ä–∏–º.' => '–¥—Ä–µ–≤–Ω–µ—Ä–∏–º—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è',
    '–µ–¥.—á.' => '–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ',
    '–∂–∞—Ä–≥.' => '–∂–∞—Ä–≥–æ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '–∂–∏–≤.' => '–∂–∏–≤–æ–ø–∏—Å—å',
    '–∂.—Ä.' => '–∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥',
    '–∂.-–¥.' => '–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '–∑–æ–æ–ª.' => '–∑–æ–æ–ª–æ–≥–∏—è',
    '–∏ –¥—Ä.' => '–∏ –¥—Ä—É–≥–æ–µ',
    '–∏ –ø—Ä.' => '–∏ –ø—Ä–æ—á–µ–µ',
    '–∏–Ω–¥.' => '–∏–Ω–¥–∏–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∏—Ä–ª.' => '–∏—Ä–ª–∞–Ω–¥—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∏—Ä–æ–Ω.' => '–∏—Ä–æ–Ω–∏—á–Ω–æ',
    '–∏—Å–∫.' => '–∏—Å–∫—É—Å—Å—Ç–≤–æ',
    '–∏—Å–ø.' => '–∏—Å–ø–∞–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∏—Å—Ç.' => '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–∏ —Ç.–ø.' => '–∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ',
    '–∏—Ç–∞–ª.' => '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∫–∞—Ä—Ç.' => '—Ç–µ—Ä–º–∏–Ω –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã',
    '–∫–∏–Ω–æ' => '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—è',
    '–∫–∏—Ç' => '–∫–∏—Ç–∞–π—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–∫–æ–º.' => '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–∫–æ–º–ø.' => '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
    '–∫—É–ª.' => '–∫—É–ª–∏–Ω–∞—Ä–∏—è',
    '–ª.' => '–ª–∏—Ü–æ',
    '–ª–∞—Å–∫.' => '–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '–ª–∞—Ç.' => '–ª–∞—Ç–∏–Ω—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–ª–µ—Å.' => '–ª–µ—Å–Ω–æ–µ –¥–µ–ª–æ',
    '–ª–∏–Ω–≥–≤.' => '–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞',
    '–ª–∏—Ç.' => '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
    '–ª–æ–≥.' => '–ª–æ–≥–∏–∫–∞',
    '–º–∞—Ç.' => '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
    '–º–µ–¥.' => '–º–µ–¥–∏—Ü–∏–Ω–∞',
    '–º–µ—Å—Ç.' => '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ',
    '–º–µ—Ç–∞–ª.' => '–º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è',
    '–º–µ—Ç–µ–æ—Ä.' => '–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—è',
    '–º–µ—Ç—Ä.' => '–º–µ—Ç—Ä–æ–ª–æ–≥–∏—è',
    '–º–µ—Ö.' => '–º–µ—Ö–∞–Ω–∏–∫–∞',
    '–º–∏–Ω.' => '–º–∏–Ω–µ—Ä–∞–ª–æ–≥–∏—è',
    '–º–∏—Ñ.' => '–º–∏—Ñ–æ–ª–æ–≥–∏—è',
    '–º–Ω.—á.' => '–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ',
    '–º–æ—Ä.' => '–º–æ—Ä—Å–∫–æ–µ –¥–µ–ª–æ',
    '–º—É–∑.' => '–º—É–∑—ã–∫–∞',
    '–Ω–∞–∫–ª.' => '–Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ',
    '–Ω–∞–ø—Ä.' => '–Ω–∞–ø—Ä–∏–º–µ—Ä',
    '–Ω–∞—Ä–µ—á.' => '–Ω–∞—Ä–µ—á–∏–µ',
    '–Ω–∞—É—á.' => '–Ω–∞—É—á–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–Ω–∞—á.' => '–Ω–∞—á–∞–ª–æ',
    '–Ω–µ–º.' => '–Ω–µ–º–µ—Ü–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–Ω–µ–æ–ª.' => '–Ω–µ–æ–ª–æ–≥–∏–∑–º',
    '–æ–±—ã–∫–Ω.' => '–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ',
    '–æ–ø—Ç.' => '–æ–ø—Ç–∏–∫–∞',
    '–æ—Å–æ–±.' => '–æ—Å–æ–±–µ–Ω–Ω–æ',
    '–æ—Ö–æ—Ç.' => '–æ—Ö–æ—Ç–Ω–∏—á–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–æ—Ñ–∏—Ü.' => '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '–ø–∞—Ä–ª.' => '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–ø–µ—Ä–µ–Ω.' => '–≤ –ø–µ—Ä–µ–Ω–æ—Å–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏',
    '–ø–æ–≥–æ–≤.' => '–ø–æ–≥–æ–≤–æ—Ä–∫–∞',
    '–ø–æ–ª.' => '–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–ø–æ–ª–∏–≥—Ä.' => '–ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—è',
    '–ø–æ—Ä—Ç—É–≥.' => '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '–ø–æ—Å–ª.' => '–ø–æ—Å–ª–æ–≤–∏—Ü–∞',
    '–ø–æ—ç—Ç.' => '–ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '–ø—Ä–µ–≤–æ—Å—Ö.' => '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è',
    '–ø—Ä–µ–¥–ª.' => '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
    '–ø—Ä–µ–¥–ª–æ–≥.' => '–ø—Ä–µ–¥–ª–æ–≥–∞–º–∏',
    '–ø—Ä–µ–∑—Ä.' => '–ø—Ä–µ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ',
    '–ø—Ä–µ–∏–º.' => '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ',
    '–ø—Ä–µ–Ω–µ–±—Ä.' => '–ø—Ä–µ–Ω–µ–±—Ä–µ–∂–∏—Ç–µ–ª—å–Ω–æ',
    '–ø—Ä–∏–±–ª.' => '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ',
    '–ø—Ä–∏–ª–∞–≥.' => '–∏–º—è –ø—Ä–∞–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ',
    '–ø—Ä–∏—Ç—è–∂.' => '–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ',
    '–ø—Ä—è–º.' => '–≤ –ø—Ä—è–º–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏',
    '–ø—Å–∏—Ö–æ–ª.' => '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è',
    '—Ä.' => '—Ä–æ–¥',
    '—Ä–∞–¥.' => '—Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞',
    '—Ä–∞–∑–≥.' => '—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—Ä–∞—Å–ø—Ä.' => '—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–æ',
    '—Ä–µ–¥–∫.' => '—Ä–µ–¥–∫–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–µ —Å–ª–æ–≤–æ',
    '—Ä–µ–ª.' => '—Ä–µ–ª–∏–≥–∏—è',
    '—Ä–∏—Ç.' => '—Ä–∏—Ç–æ—Ä–∏–∫–∞',
    '—Ä–æ–¥.' => '—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π (–ø–∞–¥–µ–∂)',
    '—Å–≤.' => '—Å–≤—è—Ç–æ–π',
    '—Å–∫–∞–∑.' => '—Å–∫–∞–∑–æ—á–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—Å–º.' => '—Å–º–æ—Ç—Ä–∏',
    '—Å–æ–±–∏—Ä.' => '—Å–æ–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—Å–æ–∫—Ä.' => '—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ',
    '—Å–æ—Å–ª–∞–≥.' => '—Å–æ—Å–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–π',
    '—Å–ø–æ—Ä—Ç.' => '—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ –∏ —Å–ø–æ—Ä—Ç',
    '—Å—Ä.' => '—Å—Ä–∞–≤–Ω–∏',
    '—Å—Ä–∞–≤–Ω–∏—Ç.' => '—Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è',
    '—Å—Ä.-–≤–µ–∫.' => '—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π',
    '—Å—Ç–µ–ø.' => '—Å—Ç–µ–ø–µ–Ω—å',
    '—Å—Ç—Ä.' => '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—Å—É—â.' => '–∏–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
    '—Å.-—Ö.' => '—Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ',
    '—Ç–≤–æ—Ä.' => '—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π (–ø–∞–¥–µ–∂)',
    '—Ç.–µ.' => '—Ç–æ –µ—Å—Ç—å',
    '—Ç–µ–∞—Ç—Ä.' => '—Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—Ç–µ–∫—Å—Ç.' => '—Ç–µ–∫—Å—Ç–∏–ª—å–Ω–æ–µ –¥–µ–ª–æ',
    '—Ç–µ–ª.' => '—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è',
    '—Ç–µ–ª–µ–≤.' => '—Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ',
    '—Ç–µ—Ö.' => '—Ç–µ—Ö–Ω–∏–∫–∞',
    '—Ç–∂.' => '—Ç–∞–∫–∂–µ',
    '—Ç–æ–ø–æ–≥—Ä.' => '—Ç–æ–ø–æ–≥—Ä–∞—Ñ–∏—è',
    '—Ç—É—Ä.' => '—Ç—É—Ä–µ—Ü–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—É–º–µ–Ω—å—à.' => '—É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞',
    '—É–Ω–∏–≤.' => '—É–Ω–∏–≤–µ—Ä—Å–∫–∏—Ç–µ—Ç—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '—É–ø–æ—Ç—Ä.' => '—É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è',
    '—É—Å—Ç.' => '—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—É—Ç–≤–µ—Ä–¥.' => '—É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–π',
    '—Ñ–∞—Ä–º.' => '—Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è',
    '—Ñ–∏–∑.' => '—Ñ–∏–∑–∏–∫–∞',
    '—Ñ–∏–∑–∏–æ–ª.' => '—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è',
    '—Ñ–∏–ª–æ–ª.' => '—Ñ–∏–ª–æ–ª–æ–≥–∏—è',
    '—Ñ–∏–ª–æ—Å.' => '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è',
    '—Ñ–∏–Ω.' => '—Ñ–∏–Ω–∞–Ω—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—Ñ–æ–Ω.' => '—Ñ–æ–Ω–µ—Ç–∏–∫–∞',
    '—Ñ–æ—Ç.' => '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
    '—Ñ—Ä.' => '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—Ñ—É—Ç–±.' => '—Ñ—É—Ç–±–æ–ª',
    '—Ö–∏–º.' => '—Ö–∏–º–∏—è',
    '—Ö–∏—Ä.' => '—Ö–∏—Ä—É—Ä–≥–∏—è',
    '—Ü–µ—Ä–∫.' => '—Ü–µ—Ä–∫–æ–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—á—Ç–æ-–Ω.' => '—á—Ç–æ-–Ω–∏–±—É–¥—å',
    '—à–∞—Ö–º.' => '—à–∞—Ö–º–∞—Ç–Ω—ã–π —Ç–µ—Ä–º–∏–Ω',
    '—à–∫.' => '—à–∫–æ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—à–æ—Ç–ª.' => '—à–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—à—É—Ç–ª.' => '—à—É—Ç–ª–∏–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
    '—ç–≤—Ñ.' => '—ç–≤—Ñ–µ–º–∏–∑–º',
    '—ç–∫.' => '—ç–∫–æ–Ω–æ–º–∏–∫–∞',
    '—ç–ª.' => '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    '—é–∂–Ω–æ–∞—Ñ—Ä.' => '—é—ç–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è',
    '—é—Ä.' => '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω',
    '—è–ø.' => '—è–ø–æ–Ω—Å–∫–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è'
];

function scanPage(){
    $links = [];
    for($i=3; $i<100; $i++){
        
        $html=file_get_contents('https://gufo.me/dict/enru_muller?page='.$i.'&letter=b');
        if (!$html){
            break;
        }
        $start = strpos($html, '<ul class="list-unstyled app-word-list">');
        $end = strpos($html, '</article>');

        $length = $end-$start;
        $html = substr($html, $start, $length);
        preg_match_all("/<a[^>]+href=\"([^\"]+)\"[^>]*>/",$html,$matches_links);
        
        for($i = 0; $i < 10; $i++){
            print_r(getTranslation($matches_links[1][$i]));
           
            echo '<br>';
            echo '<br>';  
        }
    }
} 

function getTranslation($url){
    set_time_limit(8000);
    $origin = explode('/', $url);
    $word_object = [
        'origin' => $origin[3],
        'translation' => []
    ];
    $html = file_get_contents('https://gufo.me'.$url);
    $start = strpos($html, 'lightslategray');
    $end = strpos($html, '<div class="fb-quote"></div>');

    $length = $end-$start;
    $html = substr($html, $start, $length);
    $html = strip_tags($html);
    $new_start = strpos($html, ']');
    $new_length = strlen($html)-$new_start;
    $word_string = trim(substr($html, $new_start+1, $new_length));
    
    for($i = 1; $i<15; $i++){
        if(strpos($word_string, ($i.'.')) === false){
            if(empty($word_object['translation'])){
                $word_object['translation'][0]['word'] = $word_string;
                $abbreviation_eng = findAbbreviationEng($word_object['translation'][0]['word']);
                if ($abbreviation_eng){
                    $word_object['translation'][0]['word'] = validateTextWord($abbreviation_eng['word']);
                    $word_object['translation'][0]['abbreviation_eng'] = $abbreviation_eng['abbreviation_eng'];
                }
                $abbreviation_rus = findAbbreviationRus($word_object['translation'][0]['word']);
                if ($abbreviation_rus){
                    $word_object['translation'][0]['word'] = validateTextWord($abbreviation_rus['word']);
                    $word_object['translation'][0]['abbreviation_rus'] = $abbreviation_rus['abbreviation_rus'];
                }
                
                return $word_object;
            }else{
                $word_object['translation'][0]['word'] = validateTextWord($word_object['translation'][0]['word']);
                return $word_object;
            }
        } else {
            $meaning_start = strpos($word_string, ($i.'.'));
            $meaning_end = strpos($word_string, ($i+1).'.');
            if($meaning_end == 0){
                $meaning_length  = strlen($word_string)-$meaning_start;
            }else{
                $meaning_length = $meaning_end-$meaning_start;  
            }
            $new_word_string = substr($word_string, $meaning_start+2, $meaning_length-2);
            $word_object['translation'][$i]['word'] = $new_word_string;
            
            if (strpos($word_object['translation'][$i]['word'],'1)')){
                return getSubMeaning($word_object['translation'][$i]['word'],$word_object['origin']);
            }
            
            $abbreviation_eng = findAbbreviationEng($new_word_string);
            if ($abbreviation_eng){
                $word_object['translation'][$i]['word'] = validateTextWord($abbreviation_eng['word']);
                $word_object['translation'][$i]['abbreviation_eng'] = $abbreviation_eng['abbreviation_eng'];
            }
            $abbreviation_rus = findAbbreviationRus($word_object['translation'][$i]['word']);
            if ($abbreviation_rus){
                $word_object['translation'][$i]['word'] = validateTextWord($abbreviation_rus['word']);
                $word_object['translation'][$i]['abbreviation_rus'] = $abbreviation_rus['abbreviation_rus'];
            }
        }
    }
   
    return $word_object;
    //getQirimTranslation(trim($newhtml));
}

function getSubMeaning($word, $origin){
    $sub_meaning_array = [
        'origin' => $origin
    ];
    $main_abbreviation_eng = findAbbreviationEng($word);
    
    for($k = 1; $k < 15; $k++){
        
        $word_sub_string = $word;
        $sub_meaning_start = strpos($word_sub_string, ($k.')'));

        if(!$sub_meaning_start){
            return $sub_meaning_array;
        }
        $sub_meaning_end = strpos($word_sub_string, ($k+1).')');
        if($sub_meaning_end == 0){
            $sub_meaning_length  = strlen($word_sub_string)-$sub_meaning_start;
        }else{
            $sub_meaning_length = $sub_meaning_end-$sub_meaning_start;  
        }
        $new_word_sub_string = substr($word_sub_string, $sub_meaning_start+3, $sub_meaning_length-3);
        
        $sub_meaning_array[$k]['word'] = $new_word_sub_string;
        print_r($new_word_sub_string);
        die;
       
        if ($main_abbreviation_eng){
            $sub_meaning_array[$k]['abbreviation_eng'] = $main_abbreviation_eng['abbreviation_eng'];
        }
        $abbreviation_eng = findAbbreviationEng($new_word_sub_string);
        if ($abbreviation_eng){
            $sub_meaning_array[$k]['word'] = validateTextWord($abbreviation_eng['word']);
            $sub_meaning_array[$k]['abbreviation_eng'] = $abbreviation_eng['abbreviation_eng'];
        } else {
            $sub_meaning_array[$k]['word'] = validateTextWord($sub_meaning_array[$k]['word']);
        }
        $abbreviation_rus = findAbbreviationRus($sub_meaning_array[$k]['word']);
        if ($abbreviation_rus){
            $sub_meaning_array[$k]['word'] = validateTextWord($abbreviation_rus['word']);
            $sub_meaning_array[$k]['abbreviation_rus'] = $abbreviation_rus['abbreviation_rus'];
        } else {
            $sub_meaning_array[$k]['word'] = validateTextWord($sub_meaning_array[$k]['word']);
        }
    }
}

//$findAbbreviationEng = findAbbreviationEng();
function findAbbreviationEng($word_string){
    error_reporting(0);
    global $abbreviation_eng;
    foreach ($abbreviation_eng as $abbr_eng=>$value){
        if (preg_match("/^ *($abbr_eng)[^a-z]/",$word_string)){
            $new_word_string = preg_replace("/^ *($abbr_eng)[^a-z]/", '', $word_string);
            return $meaning_object = [
                'word' => $new_word_string,
                'abbreviation_eng' => $value
            ];
        } else {
            continue;
        }
    }
    error_reporting(1);
}

function findAbbreviationRus($word_string){
    error_reporting(0);
    global $abbreviation_rus;
    $meaning_object = [
                'word' => $word_string,
                'abbreviation_rus' => []
    ];
    foreach ($abbreviation_rus as $abbr_rus=>$value){
        if (strpos($abbr_rus,'.')){
            $abbr_for_regex = str_replace(".", "\.", $abbr_rus);
        }
        if (preg_match_all("/[\s]($abbr_for_regex)|^($abbr_for_regex)/",$meaning_object['word'])){
            $new_word_string = str_replace($abbr_rus,'', $meaning_object['word']);
            $meaning_object['word'] = $new_word_string;
            array_push($meaning_object['abbreviation_rus'],$value);
        } else {
             continue;
        }
    }
    error_reporting(1);
    return $meaning_object;
}


function validateTextWord($word_string){
    $validated_meaning = [
        'meaning_lvl1' => []
    ];
    if (strpos($word_string, '‚Ö°')){
        $meaning_lvl1 = explode('‚Ö°', $word_string);
        $validated_meaning['meaning_lvl1'] = $meaning_lvl1[0];
    } else if (strpos($word_string, '‚Ö¢')){
        $meaning_lvl1 = explode('‚Ö¢', $word_string);
        $validated_meaning['meaning_lvl1'] = $meaning_lvl1[0];
    } else {
        $validated_meaning['meaning_lvl1'] = $word_string;
    }
    
    $validated_meaning['meaning_lvl1'] = preg_replace("/‚óä /", '', $validated_meaning['meaning_lvl1']);
    preg_match_all("/[^\;]*[\s][a-zA-Z].*[a-zA-Z].\W*/", $validated_meaning['meaning_lvl1'], $matches);
    
    
  
    $validated_meaning['meaning_lvl1'] = preg_replace("/[^\;]*[\s][a-zA-Z].*[a-zA-Z].\W*/", '', $validated_meaning['meaning_lvl1']);
    $validated_meaning['context_meanings'] = $matches[0];
   
    if (strpos($validated_meaning['meaning_lvl1'], ';')){
        if(strlen($validated_meaning['meaning_lvl1']) - strpos($validated_meaning['meaning_lvl1'], ';') == 3){
            $meaning_lvl2 = explode(';', $validated_meaning['meaning_lvl1']);
            $validated_meaning['meaning_lvl1'] = $meaning_lvl2[0];
            
            preg_match_all("/\([\W].*\)/", $validated_meaning['meaning_lvl1'], $matches);
            if(!empty($matches[0])){
                $validated_meaning['meaning_lvl1'] = preg_replace("/\([\W].*\)/", '', $validated_meaning['meaning_lvl1']);
                $validated_meaning['meaning_lvl1'] .= " ".$matches[0][0];
            }
            if (strpos($validated_meaning['meaning_lvl1'], ',')){
                $meaning_lvl2 = explode(',', $validated_meaning['meaning_lvl1']);
                $validated_meaning['meaning_lvl1'] = $meaning_lvl2;
            }    
        } else {
            if(substr(trim($validated_meaning['meaning_lvl1']), -1) == ';'){
                $validated_meaning['meaning_lvl1'] = rtrim(trim($validated_meaning['meaning_lvl1']),substr(trim($validated_meaning['meaning_lvl1']), -1));
            }
            $meaning_lvl2 = explode(';', $validated_meaning['meaning_lvl1']);
            $validated_meaning['meaning_lvl1'] = $meaning_lvl2;
            for($i = 0; $i<count($validated_meaning['meaning_lvl1']); $i++){
                $meaning_group = ltrim($validated_meaning['meaning_lvl1'][$i]);
                preg_match_all("/\([\W].*\)/", $meaning_group, $matches);
                if(!empty($matches[0])){
                    $validated_meaning['meaning_lvl1'][$i] = preg_replace("/\([\W].*\)/", '', $meaning_group);
                    $validated_meaning['meaning_lvl1'][$i] .= " ".$matches[0][0];
                }
                if (strpos($meaning_group, ',')){
                    $meaning_lvl3 = explode(',', $meaning_group);
                    unset($validated_meaning['meaning_lvl1'][$i]);
                    foreach ($meaning_lvl3 as $mean_lvl3){
                        array_push($validated_meaning['meaning_lvl1'],$mean_lvl3 );
                    }
                }else{
                    preg_match_all("/\([\W].*\)/", $meaning_group, $matches);
                    if(!empty($matches[0])){
                        $meaning_group = preg_replace("/\([\W].*\)/", '', $meaning_group);
                        $meaning_group .= " ".$matches[0][0];
                    }
                    continue;
                }
            }
        }
        return $validated_meaning['meaning_lvl1'];
    }else if(strpos($validated_meaning['meaning_lvl1'], ',')){
        preg_match_all("/\([\W].*\,[\W].*\)/", $validated_meaning['meaning_lvl1'],$matches);
        if(!empty($matches[0])){
            $validated_meaning['meaning_lvl1'] = preg_replace("/\([\W].*\)/", '', $validated_meaning['meaning_lvl1']);
            if(strpos($validated_meaning['meaning_lvl1'], ',')){
                $meaning_lvl3 = explode(',', $validated_meaning['meaning_lvl1']);
                foreach($meaning_lvl3 as $mean_lvl3){
                    preg_match_all("/\([\W].*\)/", $mean_lvl3, $matches);
                    if(!empty($matches[0])){
                        $mean_lvl3 = preg_replace("/\([\W].*\)/", '', $mean_lvl3);
                        $mean_lvl3 .= " ".$matches[0][0];
                    } 
                }
                $validated_meaning['meaning_lvl1'] = $meaning_lvl3;
                return $validated_meaning['meaning_lvl1']; 
            }else{
                $validated_meaning['meaning_lvl1'] .= " ".$matches[0][0];
                return $validated_meaning['meaning_lvl1']; 
            }
        }
        $meaning_lvl3 = explode(',', $validated_meaning['meaning_lvl1']);
        foreach($meaning_lvl3 as $mean_lvl3){
            preg_match_all("/\([\W].*\)/", $mean_lvl3, $matches);
            if(!empty($matches[0])){
                $mean_lvl3 = preg_replace("/\([\W].*\)/", '', $mean_lvl3);
                $mean_lvl3 .= " ".$matches[0][0];
            }
        }
        $validated_meaning['meaning_lvl1'] = $meaning_lvl3;
        return $validated_meaning['meaning_lvl1']; 
    }else{
        return $validated_meaning['meaning_lvl1']; 
    }
    
    
}

function getQirimTranslation($word){
    $html = file_get_contents('https://gufo.me/dict/rucrh/'.$word);
    $start = strpos($html, 'lightslategray');
    $end = strpos($html, '<div class="fb-quote"></div>');

    $length = $end-$start;
    $html = substr($html, $start, $length);
    $html = strip_tags($html);
    $new_start = strpos($html, ']');
    $new_length = strlen($html)-$new_start;
    $newhtml = substr($html, $new_start+3, $new_length);
    
}
scanPage();
//print_r(validateTextWord());